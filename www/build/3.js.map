{"version":3,"sources":["../../src/pages/login/login.module.ts","../../src/pages/login/login.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACZ;AAUpC;IAAA;IAA8B,CAAC;IAAlB,eAAe;QAR3B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,yDAAS;aACV;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,yDAAS,CAAC;aACpC;SACF,CAAC;OACW,eAAe,CAAG;IAAD,sBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACZc;AACmD;AACzB;AACI;AAQxE;IAWE,mBACS,SAA0B,EAC1B,WAAwB,EACxB,QAA2B,EAC3B,OAAsB,EACtB,SAAoB,EACnB,WAAwB;QALzB,cAAS,GAAT,SAAS,CAAiB;QAC1B,gBAAW,GAAX,WAAW,CAAa;QACxB,aAAQ,GAAR,QAAQ,CAAmB;QAC3B,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QACnB,gBAAW,GAAX,WAAW,CAAa;QAXlC,0DAA0D;QAC1D,uCAAuC;QAC/B,kBAAa,GAAY,KAAK,CAAC;QAWnC,gDAAgD;QAClD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,+BAA+B;YAC/B,KAAK,EAAE,CAAC,EAAE,EAAE,kEAAU,CAAC,QAAQ,CAAC;YAEhC,kCAAkC;YAClC,QAAQ,EAAE,CAAC,EAAE,EAAE,kEAAU,CAAC,QAAQ,CAAC;SAClC,CAAC,CAAC;IACL,CAAC;IAED,yCAAyC;IAClC,yBAAK,GAAZ;QAAA,iBAyCD;QAvCG,+BAA+B;QAC/B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAE1B,kDAAkD;QAClD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAC3B,CAAC;YACC,MAAM,CAAC;QACT,CAAC;QAGH,uCAAuC;QACvC,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;YAClC,OAAO,EAAE,eAAe;SACzB,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,EAAE,CAAC;QAEjB,kDAAkD;QAClD,2BAA2B;QAC3B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,SAAS;QACrD,kCAAkC;QAClC,cAAI;YACF,MAAM,CAAC,OAAO,EAAE,CAAC;YACjB,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC1C,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QACtD,CAAC;QAED,+BAA+B;QAC/B,eAAK;YACH,MAAM,CAAC,OAAO,EAAE,CAAC;YAEjB,kDAAkD;YAClD,IAAM,KAAK,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gBAClC,KAAK,EAAE,aAAa;gBACpB,QAAQ,EAAE,KAAK,CAAC,OAAO;gBACvB,OAAO,EAAE,CAAE,IAAI,CAAE;aAClB,CAAC,CAAC;YACH,KAAK,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC,CACF,CAAC;IACJ,CAAC;IAvEU,SAAS;QALrB,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,WAAW,0FAAE,CAAY;WACC;SAC3B,CAAC;gFAamC;YACb,wEAAW;YACd,qEAAiB;YAClB,iEAAa;YACX,yFAAS;YACN,MAAW;OAjBvB,SAAS,CAwErB;IAAD,CAAC;AAAA;SAxEY,SAAS,e","file":"3.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { LoginPage } from './login';\n\n@NgModule({\n  declarations: [\n    LoginPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(LoginPage),\n  ],\n})\nexport class LoginPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, LoadingController, AlertController } from 'ionic-angular';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { UserService } from '../../providers/user-service/user-service';\n\n@IonicPage({\n  name: 'login'\n})\n@Component({\n  selector: 'page-login',\n  templateUrl: 'login.html',\n  providers: [ UserService ]\n})\nexport class LoginPage \n{\n  // Form Groups will automate any data and validation\n  // in our forms.\n  private loginGroup: FormGroup;\n\n  // The submit attempt for the user will start off as false\n  // and we'll switch it on button press.\n  private submitAttempt: boolean = false;\n\n\n  constructor(\n    public alertCtrl: AlertController,\n    public formBuilder: FormBuilder,\n    public loadCtrl: LoadingController,\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    private userService: UserService)\n    {\n      // this command will set up the form validation.\n    this.loginGroup = this.formBuilder.group({\n      // the email field is required.\n      email: ['', Validators.required],\n\n      // the password field is required.\n      password: ['', Validators.required]\n      });\n    } \n\n    // processes and sends the login request.\n    public login(): void\n    {\n      // first, make a submit attempt\n      this.submitAttempt = true;\n\n      // if the form doesn't validate, stop the function\n      if (!this.loginGroup.valid)\n      {\n        return;\n      }\n\n    \n    // Create and show a loading interface.\n    const loader = this.loadCtrl.create({\n      content: 'Logging in...'\n    });\n    loader.present();\n\n    // Observable functions will only start their code\n    // if we write subscribe().\n    this.userService.login(this.loginGroup.value).subscribe(\n      // we are successful, do the rest.\n      data => {\n        loader.dismiss();\n        this.userService.storeUser(data.userdata);\n        this.navCtrl.setRoot('home', {}, { animate: true });\n      },\n      \n      // we have an error, handle it.\n      error => {\n        loader.dismiss();\n\n        // if the website didn't log us in, show an alert.\n        const alert = this.alertCtrl.create({\n          title: 'Login Error',\n          subTitle: error.message,\n          buttons: [ 'OK' ]\n        });\n        alert.present();\n      }\n    );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts"],"sourceRoot":""}